from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone

class Society(models.Model):
    name = models.CharField(max_length=200)
    location = models.CharField(max_length=200)
    description = models.TextField()
    image = models.ImageField(upload_to='societies/', blank=True, null=True)  # Society/Organization image
    coaches = models.ManyToManyField('Coaching', blank=True, related_name='societies')  # Add related_name

    def __str__(self):
        return self.name


class Event(models.Model):
    name = models.CharField(max_length=200)
    date = models.DateField()
    venue = models.CharField(max_length=200)
    registration_fee = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to='events/', blank=True, null=True)

    def __str__(self):
        return self.name


class SportsVenue(models.Model):
    name = models.CharField(max_length=200)
    location = models.CharField(max_length=200)
    description = models.TextField()
    image = models.ImageField(upload_to='venues/', blank=True, null=True)  # Image field
    societies = models.ManyToManyField(Society, blank=True)  # ManyToMany relationship with Society

    def __str__(self):
        return self.name


class Registration(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    registration_date = models.DateField(auto_now_add=True)
    payment_status = models.CharField(max_length=50)

    class Meta:
        unique_together = ('user', 'event')  # This ensures no duplicate registrations for the same user and event

    def __str__(self):
        return f"{self.user.username} - {self.event.name}"



# Updated Payment model with event and user references
class Payment(models.Model):
    order_id = models.CharField(max_length=100, unique=True)  # Unique order ID generated by Razorpay
    payment_id = models.CharField(max_length=100, null=True, blank=True)  # Payment ID returned after successful payment
    amount = models.DecimalField(max_digits=10, decimal_places=2)  # Amount paid for the event
    status = models.CharField(max_length=50)  # Payment status (Pending, Success, Failed)
    event = models.ForeignKey(Event, on_delete=models.CASCADE)  # Link to the event
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Link to the user who made the payment
    created_at = models.DateTimeField(default=timezone.now)  # Timestamp when the payment record was created

    def __str__(self):
        return f"Payment for {self.event.name} by {self.user.username} - {self.status}"


class Sport(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Coaching(models.Model):
    title = models.CharField(max_length=200)
    coach_name = models.CharField(max_length=100)
    sport = models.ForeignKey('Sport', on_delete=models.CASCADE, null=True, blank=True)
    society = models.ForeignKey(Society, on_delete=models.CASCADE, null=True, blank=True)
    description = models.TextField()
    image = models.ImageField(upload_to='coaching/', blank=True, null=True)

    def __str__(self):
        return self.title


class Contact(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    mobile_number = models.CharField(max_length=15)
    message = models.TextField()
    created_at = models.DateTimeField(default=timezone.now)  # Set to auto_now_add to track when the message was created

    def __str__(self):
        return self.name
